name: Deploy to AWS Linux Docker with Docker Compose

on:
  push:
    branches:
      - main  # `main` 브랜치에 push될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. JDK 17 설정 (AWS 공식 GitHub Actions 사용)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 빌드 (Spring Boot JAR 생성)
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean bootJar -x test

      # 4. SCP를 통한 파일 전송을 위한 SSH 설정
      - name: Set up SSH key for SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_KEY }}
          port: 22
          source: "./Dockerfile,./docker-compose.yml,./build/libs/zb-weather-diary.jar"
          target: "/home/ec2-user/deploy/zb-weather-diary"

      # 5. AWS 서버에 SSH 접속 및 Docker Compose로 배포
      - name: Deploy to AWS Docker Compose
        run: |
          echo "Starting SSH connection to EC2..."
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_KEY }}" | tee ~/.ssh/id_rsa > /dev/null
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts

          # SSH 접속 시 호스트 키 검증 비활성화 및 배포 실행
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.AWS_HOST }} << 'EOF'
            echo "Setting environment variables..."
            export JASYPT_ENCRYPTOR_PASSWORD=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
            export DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            export DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            export DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}

            # 기존 컨테이너 중지 및 삭제 (이름 충돌 방지)
            echo "Stopping existing containers..."
            docker-compose -f ~/deploy/zb-weather-diary/docker-compose.yml down || true

            # 기존 컨테이너가 남아 있는 경우 강제 삭제
            echo "Removing old containers if exist..."
            docker ps -aq --filter name=zb-weather-diary-container | xargs -r docker rm -f

            # 기존 네트워크 삭제 (필요 시)
            docker network prune -f

            # Docker Compose로 컨테이너 실행
            echo "Starting Docker Compose..."
            cd ~/deploy/zb-weather-diary
            docker-compose up -d --build
          EOF
